<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.hfut.laboratory</groupId>
    <artifactId>accout-mange</artifactId>
    <version>1.0-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <java.version>1.8</java.version>
        <swagger2markup.version>1.2.0</swagger2markup.version>
        <asciidoctor.input.directory>${project.basedir}/src/docs/asciidoc</asciidoctor.input.directory>

        <swagger.output.dir>${project.build.directory}/swagger</swagger.output.dir>
        <swagger.snippetOutput.dir>${project.build.directory}/asciidoc/snippets</swagger.snippetOutput.dir>
        <generated.asciidoc.directory>${project.build.directory}/asciidoc/generated</generated.asciidoc.directory>
        <asciidoctor.html.output.directory>${project.build.directory}/asciidoc/html</asciidoctor.html.output.directory>
        <asciidoctor.pdf.output.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.pdf.output.directory>

        <swagger.input>${swagger.output.dir}/swagger.json</swagger.input>
    </properties>


<!--    <pluginRepositories>-->
<!--        <pluginRepository>-->
<!--            <id>jcenter-snapshots</id>-->
<!--            <name>jcenter</name>-->
<!--            <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>-->
<!--        </pluginRepository>-->
<!--        <pluginRepository>-->
<!--            <id>jcenter-releases</id>-->
<!--            <name>jcenter</name>-->
<!--            <url>http://jcenter.bintray.com</url>-->
<!--            <snapshots>-->
<!--                <enabled>false</enabled>-->
<!--            </snapshots>-->
<!--        </pluginRepository>-->
<!--    </pluginRepositories>-->

<!--    <repositories>-->
<!--        <repository>-->
<!--            <id>jcentral</id>-->
<!--            <name>bintray</name>-->
<!--            <url>http://jcenter.bintray.com</url>-->
<!--            <snapshots>-->
<!--                <enabled>false</enabled>-->
<!--            </snapshots>-->
<!--        </repository>-->
<!--        <repository>-->
<!--            <id>jcenter-snapshots</id>-->
<!--            <name>jcenter</name>-->
<!--            <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>-->
<!--        </repository>-->
<!--    </repositories>-->

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-configuration-processor</artifactId>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-autoconfigure</artifactId>-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.0.5</version>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
            <version>3.0.5</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>1.7.0</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt</artifactId>
            <version>0.9.0</version>
        </dependency>
        <!--在设置jwt参数时解析当前时间的工具类-->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.11</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.2</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.2</version>
        </dependency>
<!--        &lt;!&ndash;offline doc&ndash;&gt;-->
<!--        <dependency>-->
<!--            <groupId>org.springframework.restdocs</groupId>-->
<!--            <artifactId>spring-restdocs-mockmvc</artifactId>-->
<!--            &lt;!&ndash;<version>2.0.2.RELEASE</version>&ndash;&gt;-->
<!--            &lt;!&ndash;<scope>test</scope>&ndash;&gt;-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>io.github.swagger2markup</groupId>-->
<!--            <artifactId>swagger2markup-spring-restdocs-ext</artifactId>-->
<!--            <version>${swagger2markup.version}</version>-->
<!--            <scope>test</scope>-->
<!--        </dependency>-->
<!--        <dependency>-->
<!--            <groupId>io.springfox</groupId>-->
<!--            <artifactId>springfox-staticdocs</artifactId>-->
<!--            <version>2.6.1</version>-->
<!--            &lt;!&ndash;<scope>test</scope>&ndash;&gt;-->
<!--        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.1</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>

            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <configuration>
                    <!--指定生成的镜像名-->
                    <imageName>yzx/${project.artifactId}</imageName>
                    <!--指定标签-->
                    <imageTags>
                        <imageTag>3.0</imageTag>
                    </imageTags>
                    <!-- 指定 Dockerfile 路径 ${project.basedir}：项目根路径下（默认是 根路径/Dockerfile）-->
                    <dockerDirectory>${project.basedir}</dockerDirectory>
                    <!--指定远程 docker api地址-->
                    <dockerHost>http://106.14.125.136:2019</dockerHost>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!--jar 包所在的路径 此处配置的 即对应 target 目录（默认是 根路径/target）-->
                            <directory>${project.build.directory}</directory>
                            <!-- 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名（默认是 ${artifactId}-${version})-->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <!-- 以下两行是为了docker push到DockerHub使用的。 -->
                    <serverId>docker-hub</serverId>
                    <registryUrl>https://index.docker.io/v1</registryUrl>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.3</version>
                <configuration>
                    <compilerVersion>${java.version}</compilerVersion>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>UTF-8</encoding>
                    <!-- prevents endPosTable exception for maven compile -->
                    <useIncrementalCompilation>false</useIncrementalCompilation>
                </configuration>
            </plugin>

<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-surefire-plugin</artifactId>-->
<!--                <configuration>-->
<!--                    <systemPropertyVariables>-->
<!--                        <io.springfox.staticdocs.outputDir>${swagger.output.dir}</io.springfox.staticdocs.outputDir>-->
<!--                        <io.springfox.staticdocs.snippetsOutputDir>${swagger.snippetOutput.dir}</io.springfox.staticdocs.snippetsOutputDir>-->
<!--                    </systemPropertyVariables>-->
<!--                </configuration>-->
<!--            </plugin>-->


<!--            &lt;!&ndash; First, use the swagger2markup plugin to generate asciidoc &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>io.github.swagger2markup</groupId>-->
<!--                <artifactId>swagger2markup-maven-plugin</artifactId>-->
<!--                <version>${swagger2markup.version}</version>-->
<!--                <dependencies>-->
<!--                    <dependency>-->
<!--                        <groupId>io.github.swagger2markup</groupId>-->
<!--                        <artifactId>swagger2markup-import-files-ext</artifactId>-->
<!--                        <version>${swagger2markup.version}</version>-->
<!--                    </dependency>-->
<!--                    <dependency>-->
<!--                        <groupId>io.github.swagger2markup</groupId>-->
<!--                        <artifactId>swagger2markup-spring-restdocs-ext</artifactId>-->
<!--                        <version>${swagger2markup.version}</version>-->
<!--                    </dependency>-->
<!--                </dependencies>-->
<!--                <configuration>-->
<!--                    <swaggerInput>${swagger.input}</swaggerInput>-->
<!--                    <outputDir>${generated.asciidoc.directory}</outputDir>-->
<!--                    <config>-->
<!--                        <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>-->
<!--                        <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>-->
<!--                        <swagger2markup.generatedExamplesEnabled>true</swagger2markup.generatedExamplesEnabled>-->

<!--                        <swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>-->
<!--                        <swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>-->
<!--                        <swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>-->
<!--                        <swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>-->

<!--                        <swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>-->
<!--                        <swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>-->
<!--                    </config>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <phase>test</phase>-->
<!--                        <goals>-->
<!--                            <goal>convertSwagger2markup</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

<!--            &lt;!&ndash; Run the generated asciidoc through Asciidoctor to generate-->
<!--                 other documentation types, such as PDFs or HTML5 &ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>org.asciidoctor</groupId>-->
<!--                <artifactId>asciidoctor-maven-plugin</artifactId>-->
<!--                <version>1.5.6</version>-->
<!--                &lt;!&ndash; Include Asciidoctor PDF for pdf generation &ndash;&gt;-->
<!--                <dependencies>-->
<!--                    <dependency>-->
<!--                        <groupId>org.asciidoctor</groupId>-->
<!--                        <artifactId>asciidoctorj-pdf</artifactId>-->
<!--                        <version>1.5.0-alpha.16</version>-->
<!--                    </dependency>-->
<!--                    <dependency>-->
<!--                        <groupId>org.jruby</groupId>-->
<!--                        <artifactId>jruby-complete</artifactId>-->
<!--                        <version>1.7.21</version>-->
<!--                    </dependency>-->
<!--                </dependencies>-->
<!--                &lt;!&ndash; Configure generic document generation settings &ndash;&gt;-->
<!--                <configuration>-->
<!--                    <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>-->
<!--                    <sourceDocumentName>index.adoc</sourceDocumentName>-->
<!--                    <attributes>-->
<!--                        <doctype>book</doctype>-->
<!--                        <toc>left</toc>-->
<!--                        <toclevels>3</toclevels>-->
<!--                        <numbered></numbered>-->
<!--                        <hardbreaks></hardbreaks>-->
<!--                        <sectlinks></sectlinks>-->
<!--                        <sectanchors></sectanchors>-->
<!--                        <generated>${generated.asciidoc.directory}</generated>-->
<!--                    </attributes>-->
<!--                </configuration>-->
<!--                &lt;!&ndash; Since each execution can only handle one backend, run-->
<!--                     separate executions for each desired output type &ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>output-html</id>-->
<!--                        <phase>test</phase>-->
<!--                        <goals>-->
<!--                            <goal>process-asciidoc</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <backend>html5</backend>-->
<!--                            <outputDirectory>${asciidoctor.html.output.directory}</outputDirectory>-->
<!--                        </configuration>-->
<!--                    </execution>-->

<!--                    <execution>-->
<!--                        <id>output-pdf</id>-->
<!--                        <phase>test</phase>-->
<!--                        <goals>-->
<!--                            <goal>process-asciidoc</goal>-->
<!--                        </goals>-->
<!--                        <configuration>-->
<!--                            <backend>pdf</backend>-->
<!--                            <outputDirectory>${asciidoctor.pdf.output.directory}</outputDirectory>-->
<!--                        </configuration>-->
<!--                    </execution>-->

<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>
</project>